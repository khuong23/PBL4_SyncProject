package com.pbl4.syncproject.client.services;

import com.google.gson.JsonObject;
import com.pbl4.syncproject.common.jsonhandler.JsonUtils;
import com.pbl4.syncproject.common.jsonhandler.Request;
import com.pbl4.syncproject.common.jsonhandler.Response;

import java.io.*;
import java.nio.file.Files;
import java.util.Base64;

/**
 * Service class ƒë·ªÉ x·ª≠ l√Ω network communication v·ªõi server
 * T√°ch bi·ªát network logic kh·ªèi UI controller
 * S·ª≠ d·ª•ng ClientConnectionManager ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi duy nh·∫•t
 */
public class NetworkService {
    private static final long MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB limit

    private String serverIP;
    private int serverPort;

    /**
     * Constructor - PH·∫¢I set server address sau khi t·∫°o object
     */
    public NetworkService() {
        // Kh√¥ng set default IP/port - ph·∫£i ƒë∆∞·ª£c set t·ª´ login
        this.serverIP = null;
        this.serverPort = 0;
    }

    /**
     * Constructor v·ªõi custom server IP v√† port (recommended)
     */
    public NetworkService(String serverIP, int serverPort) {
        this.serverIP = serverIP;
        this.serverPort = serverPort;
    }

    /**
     * Set server IP v√† port (B·∫ÆT BU·ªòC g·ªçi tr∆∞·ªõc khi s·ª≠ d·ª•ng c√°c method kh√°c)
     */
    public void setServerAddress(String serverIP, int serverPort) {
        this.serverIP = serverIP;
        this.serverPort = serverPort;
        System.out.println("üìç NetworkService configured: " + serverIP + ":" + serverPort);
    }

    /**
     * Ki·ªÉm tra xem server address ƒë√£ ƒë∆∞·ª£c set ch∆∞a
     */
    private void validateServerAddress() throws Exception {
        if (serverIP == null || serverIP.trim().isEmpty() || serverPort <= 0) {
            throw new Exception("Server address ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p! Vui l√≤ng g·ªçi setServerAddress() tr∆∞·ªõc.");
        }
    }

    /**
     * Get current server IP
     */
    public String getServerIP() {
        return this.serverIP;
    }

    /**
     * Get current server port
     */
    public int getServerPort() {
        return this.serverPort;
    }

    /**
     * Upload file l√™n server
     */
    public Response uploadFile(File file, int folderId) throws Exception {
        validateServerAddress(); // Ki·ªÉm tra server address tr∆∞·ªõc khi s·ª≠ d·ª•ng

        // Validate file size
        if (file.length() > MAX_FILE_SIZE) {
            throw new Exception("File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa: " + formatFileSize(MAX_FILE_SIZE));
        }

        // Validate file exists and is readable
        if (!file.exists()) {
            throw new Exception("File kh√¥ng t·ªìn t·∫°i: " + file.getAbsolutePath());
        }

        if (!file.canRead()) {
            throw new Exception("Kh√¥ng th·ªÉ ƒë·ªçc file: " + file.getAbsolutePath());
        }

        try {
            // ƒê·ªçc file v√† encode base64
            byte[] fileBytes = Files.readAllBytes(file.toPath());
            String base64Content = Base64.getEncoder().encodeToString(fileBytes);

            // Validate base64 content
            if (base64Content.isEmpty()) {
                throw new Exception("N·ªôi dung file r·ªóng ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c");
            }

            // T·∫°o request JSON
            JsonObject data = new JsonObject();
            data.addProperty("fileName", file.getName());
            data.addProperty("fileContent", base64Content);
            data.addProperty("folderId", folderId);
            data.addProperty("fileSize", file.length());
            data.addProperty("lastModified", file.lastModified());

            Request request = new Request("UPLOAD_FILE", data);

            // G·ª≠i request v√† nh·∫≠n response
            return sendRequest(request);

        } catch (OutOfMemoryError e) {
            throw new Exception("File qu√° l·ªõn ƒë·ªÉ x·ª≠ l√Ω trong b·ªô nh·ªõ. H√£y th·ª≠ file nh·ªè h∆°n.");
        } catch (IOException e) {
            throw new Exception("L·ªói ƒë·ªçc file: " + e.getMessage());
        } catch (Exception e) {
            throw e;
        }
    }

    /**
     * Upload file l√™n server v·ªõi default folder (root)
     */
    public Response uploadFile(File file) throws Exception {
        return uploadFile(file, 1); // 1 = root folder (not 0)
    }

    /**
     * L·∫•y danh s√°ch files v√† folders t·ª´ server
     */
    public Response getFileList(int folderId) throws Exception {
        validateServerAddress();

        JsonObject data = new JsonObject();
        data.addProperty("folderId", folderId);

        Request request = new Request("GET_FILE_LIST", data);
        return sendRequest(request);
    }

    /**
     * L·∫•y danh s√°ch files t·ª´ root folder
     */
    public Response getFileList() throws Exception {
        return getFileList(1); // 1 = root folder (not 0)
    }

    /**
     * T·∫°o folder tr√™n server
     */
    public Response createFolder(String folderName, int parentFolderId) throws Exception {
        validateServerAddress();

        JsonObject data = new JsonObject();
        data.addProperty("folderName", folderName);
        data.addProperty("parentFolderId", parentFolderId);

        Request request = new Request("CREATE_FOLDER", data);
        return sendRequest(request);
    }

    /**
     * T·∫°o folder v·ªõi parent m·∫∑c ƒë·ªãnh (root)
     */
    public Response createFolder(String folderName) throws Exception {
        return createFolder(folderName, 1); // 1 = root folder (not 0)
    }

    /**
     * L·∫•y folder tree t·ª´ server (children of specific parent)
     * @param parentId ID c·ªßa th∆∞ m·ª•c cha (0 = l·∫•y th∆∞ m·ª•c g·ªëc)
     */
    public Response getFolderTree(int parentId) throws Exception {
        validateServerAddress();
        JsonObject data = new JsonObject();
        // ID 0 c√≥ nghƒ©a l√† y√™u c·∫ßu c√°c th∆∞ m·ª•c g·ªëc
        if (parentId > 0) {
            data.addProperty("parentId", parentId);
        }
        Request request = new Request("FOLDER_TREE", data);
        return sendRequest(request);
    }
    
    /**
     * L·∫•y folder tree t·ª´ server (children of root folder) - ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
     * ParentId = 1 ƒë·ªÉ l·∫•y c√°c folder con c·ªßa root (shared, documents, images, videos)
     */
    public Response getFolderTree() throws Exception {
        return getFolderTree(0); // Y√™u c·∫ßu c√°c th∆∞ m·ª•c g·ªëc theo m·∫∑c ƒë·ªãnh
    }

    /**
     * Download file t·ª´ server
     */
    public Response downloadFile(String fileName, int folderId) throws Exception {
        validateServerAddress();

        JsonObject data = new JsonObject();
        data.addProperty("fileName", fileName);
        data.addProperty("folderId", folderId);

        Request request = new Request("DOWNLOAD", data);
        return sendRequest(request);
    }

    /**
     * Test connection to server - s·ª≠ d·ª•ng persistent connection
     */
    public boolean testConnection() {
        try {
            // Ki·ªÉm tra xem connection manager c√≥ k·∫øt n·ªëi kh√¥ng
            ClientConnectionManager connectionManager = ClientConnectionManager.getInstance();
            if (!connectionManager.isConnected()) {
                // Th·ª≠ k·∫øt n·ªëi n·∫øu ch∆∞a c√≥
                if (serverIP != null && serverPort > 0) {
                    connectionManager.connect(serverIP, serverPort);
                    return true;
                }
                return false;
            }
            return true;
        } catch (Exception e) {
            System.err.println("Test connection failed: " + e.getMessage());
            return false;
        }
    }    /**
     * G·ª≠i request l√™n server v√† nh·∫≠n response (s·ª≠ d·ª•ng persistent connection)
     */
    private Response sendRequest(Request request) throws Exception {
        // L·∫•y instance c·ªßa connection manager
        ClientConnectionManager connectionManager = ClientConnectionManager.getInstance();

        if (!connectionManager.isConnected()) {
            // C·ªë g·∫Øng k·∫øt n·ªëi l·∫°i n·∫øu b·ªã m·∫•t k·∫øt n·ªëi
            if (serverIP != null && serverPort > 0) {
                connectionManager.connect(serverIP, serverPort);
            } else {
                throw new Exception("M·∫•t k·∫øt n·ªëi t·ªõi server v√† kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ k·∫øt n·ªëi l·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            }
        }
        
        try {
            String requestJson = JsonUtils.toJson(request);
            if (requestJson == null || requestJson.trim().isEmpty()) {
                throw new Exception("L·ªói t·∫°o request JSON");
            }
            
            System.out.println("DEBUG: Sending request (persistent): " + requestJson.substring(0, Math.min(100, requestJson.length())));
            
            // S·ª≠ d·ª•ng manager ƒë·ªÉ g·ª≠i v√† nh·∫≠n
            String responseStr = connectionManager.sendRequestAndGetResponse(requestJson);

            if (responseStr == null) {
                throw new Exception("Server kh√¥ng ph·∫£n h·ªìi ho·∫∑c ƒë√£ ng·∫Øt k·∫øt n·ªëi");
            }

            System.out.println("DEBUG: Received response (persistent): " + responseStr.substring(0, Math.min(100, responseStr.length())));

            // Parse response
            Response response = JsonUtils.fromJson(responseStr, Response.class);
            if (response == null) {
                throw new Exception("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ server");
            }

            return response;

        } catch (IOException e) {
            // Khi c√≥ l·ªói IO, ƒë√≥ng k·∫øt n·ªëi ƒë·ªÉ bu·ªôc t·∫°o k·∫øt n·ªëi m·ªõi l·∫ßn sau
            connectionManager.close();
            throw new Exception("L·ªói k·∫øt n·ªëi m·∫°ng: " + e.getMessage(), e);
        } catch (Exception e) {
            if (e.getMessage() != null && e.getMessage().startsWith("Kh√¥ng th·ªÉ")) {
                throw e; // Re-throw our custom messages
            }
            throw new Exception("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage(), e);
        }
    }

    /**
     * Get current server info from connection manager
     */
    public String getServerInfo() {
        ClientConnectionManager connectionManager = ClientConnectionManager.getInstance();
        String connectionInfo = connectionManager.getServerInfo();
        if (!"Not connected".equals(connectionInfo)) {
            return connectionInfo;
        }
        return serverIP + ":" + serverPort; // Fallback to local info
    }

    /**
     * Format file size in human readable format
     */
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format("%.1f %sB", bytes / Math.pow(1024, exp), pre);
    }
}