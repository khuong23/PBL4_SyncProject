package com.pbl4.syncproject.client.services;

import com.pbl4.syncproject.client.models.FileItem;
import com.pbl4.syncproject.client.views.IMainView;
import com.pbl4.syncproject.common.jsonhandler.Response;
import javafx.application.Platform;
import javafx.concurrent.Task;

import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Service ƒë·ªÉ qu·∫£n l√Ω upload operations v·ªõi retry logic v√† error handling
 * T√°ch bi·ªát kh·ªèi Controller ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a v√† t√°i s·ª≠ d·ª•ng
 */
public class UploadManager {
    
    private final NetworkService networkService;
    private final IMainView mainView;
    private final int maxRetries = 3;
    
    public UploadManager(NetworkService networkService, IMainView mainView) {
        this.networkService = networkService;
        this.mainView = mainView;
    }
    
    /**
     * Upload file v·ªõi callback ƒë·ªÉ b√°o c√°o k·∫øt qu·∫£ v·ªÅ Controller
     */
    public void uploadFile(File file, String currentDirectory, UploadResultCallback callback) {
        uploadFileWithRetry(file, currentDirectory, 0, callback);
    }
    
    /**
     * Validate file tr∆∞·ªõc khi upload
     */
    public boolean validateFileForUpload(File file) {
        FileService.ValidationResult result = FileService.validateFileForUpload(file);
        
        if (!result.isValid) {
            mainView.showAlert("L·ªói", result.message, IMainView.AlertType.ERROR);
            return false;
        }
        
        // Check if file is empty - show warning but allow
        if (file.length() == 0) {
            return mainView.showConfirmDialog("C·∫£nh b√°o",
                "File n√†y r·ªóng. B·∫°n c√≥ ch·∫Øc mu·ªën t·∫£i l√™n?");
        }
        
        return true;
    }
    
    /**
     * Upload file v·ªõi retry mechanism
     */
    private void uploadFileWithRetry(File file, String currentDirectory, int retryCount, UploadResultCallback callback) {
        Task<Response> uploadTask = new Task<Response>() {
            @Override
            protected Response call() throws Exception {
                try {
                    // Update progress to 10%
                    updateProgress(10, 100);
                    updateMessage("ƒêang chu·∫©n b·ªã file: " + file.getName() + "...");
                    
                    // Simulate file preparation time
                    Thread.sleep(500);
                    
                    // Update progress to 30%
                    updateProgress(30, 100);
                    updateMessage("ƒêang k·∫øt n·ªëi server...");

                    // Update progress to 50%
                    updateProgress(50, 100);
                    updateMessage("ƒêang t·∫£i l√™n file...");
                    
                    // --- B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI ---
                    // Tham s·ªë 'currentDirectory' th·ª±c ch·∫•t ƒëang ch·ª©a chu·ªói ID c·ªßa th∆∞ m·ª•c (v√≠ d·ª•: "3").
                    // Ch√∫ng ta ch·ªâ c·∫ßn chuy·ªÉn ƒë·ªïi n√≥ th√†nh s·ªë nguy√™n.
                    int folderId = Integer.parseInt(currentDirectory);
                    // --- K·∫æT TH√öC S·ª¨A ƒê·ªîI ---
                    
                    // Upload file using NetworkService
                    Response response = networkService.uploadFile(file, folderId);
                    
                    updateProgress(90, 100);
                    updateMessage("X√°c nh·∫≠n t·∫£i l√™n...");
                    
                    // Simulate verification
                    Thread.sleep(300);
                    
                    updateProgress(100, 100);
                    updateMessage("Ho√†n th√†nh!");
                    
                    return response;
                } catch (Exception e) {
                    throw e;
                }
            }
        };
        
        // Bind progress to UI
        uploadTask.progressProperty().addListener((obs, oldProgress, newProgress) -> {
            double progress = newProgress.doubleValue();
            mainView.showUploadProgress(file.getName(), progress);
        });
        
        // Bind status message to UI
        uploadTask.messageProperty().addListener((obs, oldMessage, newMessage) -> {
            if (newMessage != null) {
                mainView.setStatusMessage(newMessage);
            }
        });
        
        uploadTask.setOnSucceeded(e -> {
            mainView.hideUploadProgress();
            
            Response response = uploadTask.getValue();
            if (response != null && "success".equals(response.getStatus())) {
                handleUploadSuccess(file, currentDirectory, response, callback);
            } else {
                String errorMsg = response != null && response.getMessage() != null ? 
                                response.getMessage() : "Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server";
                handleUploadError(file, currentDirectory, errorMsg, retryCount, callback);
            }
        });
        
        uploadTask.setOnFailed(e -> {
            mainView.hideUploadProgress();
            Throwable exception = uploadTask.getException();
            String errorMsg = exception != null ? exception.getMessage() : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
            handleUploadError(file, currentDirectory, errorMsg, retryCount, callback);
        });
        
        new Thread(uploadTask).start();
    }
    
    /**
     * X·ª≠ l√Ω upload th√†nh c√¥ng
     */
    private void handleUploadSuccess(File file, String currentDirectory, Response response, UploadResultCallback callback) {
        // Get current folder name for the uploaded file
        String currentFolderName = currentDirectory.replace("üìÅ ", "").replace("/", "").trim();
        
        // Create FileItem ƒë·ªÉ add v√†o list
        FileItem newFile = new FileItem(
            FileService.getFileIcon(file.getName()) + " " + file.getName(),
            FileService.formatFileSize(file.length()),
            FileService.getFileType(file.getName()),
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
            "ƒê·ªçc/Ghi",
            "‚úÖ ƒê√£ ƒë·ªìng b·ªô",
            currentFolderName
        );
        
        mainView.setStatusMessage("T·∫£i l√™n th√†nh c√¥ng: " + file.getName());
        
        String successMsg = response.getMessage() != null ? response.getMessage() : 
                          "File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!";
        mainView.showAlert("Th√†nh c√¥ng", successMsg, IMainView.AlertType.INFORMATION);
        
        // Notify callback v·ªÅ success
        Platform.runLater(() -> callback.onUploadResult(file, newFile, true, successMsg));
    }
    
    /**
     * X·ª≠ l√Ω upload error v·ªõi retry logic
     */
    private void handleUploadError(File file, String currentDirectory, String errorMsg, int retryCount, UploadResultCallback callback) {
        // Categorize error type
        ErrorType errorType = categorizeError(errorMsg);
        
        // For connection errors, always check connection first
        if (errorType == ErrorType.CONNECTION) {
            mainView.setConnectionStatus("M·∫•t k·∫øt n·ªëi", false);
            
            // Don't retry connection errors too aggressively
            if (retryCount >= 1) {
                showFinalConnectionError(file, errorMsg, retryCount);
                Platform.runLater(() -> callback.onUploadResult(file, null, false, errorMsg));
                return;
            }
        }
        
        // Don't retry certain types of errors
        if (errorType == ErrorType.FILE_INVALID || errorType == ErrorType.PERMISSION) {
            showNonRetryableError(file, errorMsg, errorType);
            Platform.runLater(() -> callback.onUploadResult(file, null, false, errorMsg));
            return;
        }
        
        if (retryCount < maxRetries) {
            // Show retry dialog with error-specific message
            String retryMessage = getRetryMessage(errorType, errorMsg, retryCount, maxRetries);
            boolean retry = mainView.showConfirmDialog("L·ªói t·∫£i l√™n", retryMessage);

            if (retry) {
                mainView.setStatusMessage("ƒêang th·ª≠ l·∫°i... (" + (retryCount + 2) + "/" + (maxRetries + 1) + ")");

                // Different retry delays based on error type
                int delayMs = getRetryDelay(errorType, retryCount);

                // Retry after delay
                Task<Void> retryTask = new Task<Void>() {
                    @Override
                    protected Void call() throws Exception {
                        Thread.sleep(delayMs);
                        return null;
                    }
                };

                retryTask.setOnSucceeded(e -> {
                    uploadFileWithRetry(file, currentDirectory, retryCount + 1, callback);
                });

                new Thread(retryTask).start();
                return;
            }
        }

        // Final failure - no more retries
        showFinalError(file, errorMsg, retryCount, errorType);
        Platform.runLater(() -> callback.onUploadResult(file, null, false, errorMsg));
    }
    
    // =================================================================
    // ERROR HANDLING UTILITIES
    // =================================================================
    
    /**
     * Error types cho better handling
     */
    private enum ErrorType {
        CONNECTION, TIMEOUT, FILE_INVALID, PERMISSION, SERVER_ERROR, UNKNOWN
    }
    
    /**
     * Categorize error d·ª±a tr√™n error message
     */
    private ErrorType categorizeError(String errorMsg) {
        if (errorMsg == null) return ErrorType.UNKNOWN;
        
        String lowerMsg = errorMsg.toLowerCase();
        if (lowerMsg.contains("k·∫øt n·ªëi") || lowerMsg.contains("connect") || 
            lowerMsg.contains("server") && lowerMsg.contains("t·∫Øt")) {
            return ErrorType.CONNECTION;
        }
        if (lowerMsg.contains("timeout") || lowerMsg.contains("time out")) {
            return ErrorType.TIMEOUT;
        }
        if (lowerMsg.contains("kh√¥ng t·ªìn t·∫°i") || lowerMsg.contains("file") && lowerMsg.contains("invalid")) {
            return ErrorType.FILE_INVALID;
        }
        if (lowerMsg.contains("permission") || lowerMsg.contains("quy·ªÅn")) {
            return ErrorType.PERMISSION;
        }
        if (lowerMsg.contains("server error") || lowerMsg.contains("internal server")) {
            return ErrorType.SERVER_ERROR;
        }
        return ErrorType.UNKNOWN;
    }
    
    /**
     * Get retry message d·ª±a tr√™n error type
     */
    private String getRetryMessage(ErrorType errorType, String errorMsg, int retryCount, int maxRetries) {
        String baseMsg = "L·ªói t·∫£i l√™n file: " + errorMsg + "\n" +
                        "L·∫ßn th·ª≠: " + (retryCount + 1) + "/" + maxRetries + "\n\n";
        
        switch (errorType) {
            case CONNECTION:
                return baseMsg + "L·ªói k·∫øt n·ªëi server. B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng?\n" +
                              "(S·∫Ω ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi th·ª≠ l·∫°i)";
            case TIMEOUT:
                return baseMsg + "K·∫øt n·ªëi b·ªã timeout. B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng?\n" +
                              "(S·∫Ω tƒÉng th·ªùi gian ch·ªù)";
            case SERVER_ERROR:
                return baseMsg + "L·ªói server. B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng?\n" +
                              "(Server c√≥ th·ªÉ t·∫°m th·ªùi qu√° t·∫£i)";
            default:
                return baseMsg + "B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng?";
        }
    }
    
    /**
     * Get retry delay d·ª±a tr√™n error type
     */
    private int getRetryDelay(ErrorType errorType, int retryCount) {
        switch (errorType) {
            case CONNECTION:
                return 5000 + (retryCount * 3000); // 5s, 8s, 11s...
            case TIMEOUT:
                return 3000 + (retryCount * 2000); // 3s, 5s, 7s...
            case SERVER_ERROR:
                return (int) Math.pow(2, retryCount) * 2000; // 2s, 4s, 8s...
            default:
                return (int) Math.pow(2, retryCount) * 1000; // 1s, 2s, 4s...
        }
    }
    
    /**
     * Show error cho non-retryable errors
     */
    private void showNonRetryableError(File file, String errorMsg, ErrorType errorType) {
        mainView.setStatusMessage("L·ªói t·∫£i l√™n: " + file.getName());
        
        String title = "L·ªói t·∫£i l√™n";
        String message = "Kh√¥ng th·ªÉ t·∫£i l√™n file: " + errorMsg;
        
        switch (errorType) {
            case FILE_INVALID:
                message += "\n\nVui l√≤ng ki·ªÉm tra:\n‚Ä¢ File c√≥ t·ªìn t·∫°i kh√¥ng\n‚Ä¢ File c√≥ b·ªã h·ªèng kh√¥ng\n‚Ä¢ T√™n file c√≥ h·ª£p l·ªá kh√¥ng";
                break;
            case PERMISSION:
                message += "\n\nVui l√≤ng ki·ªÉm tra:\n‚Ä¢ Quy·ªÅn truy c·∫≠p file\n‚Ä¢ Quy·ªÅn upload tr√™n server\n‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n";
                break;
            default:
                message += "\n\nVui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£";
                break;
        }
        
        mainView.showAlert(title, message, IMainView.AlertType.ERROR);
    }
    
    /**
     * Show final connection error
     */
    private void showFinalConnectionError(File file, String errorMsg, int retryCount) {
        mainView.setStatusMessage("M·∫•t k·∫øt n·ªëi server");
        
        String message = "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server sau " + (retryCount + 1) + " l·∫ßn th·ª≠:\n\n" + errorMsg +
                        "\n\nH∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:\n" +
                        "‚Ä¢ Ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng\n" +
                        "‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet\n" +
                        "‚Ä¢ Ki·ªÉm tra firewall v√† antivirus\n" +
                        "‚Ä¢ Th·ª≠ l·∫°i sau 5-10 ph√∫t\n" +
                        "‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c";
        
        mainView.showAlert("L·ªói k·∫øt n·ªëi", message, IMainView.AlertType.ERROR);
    }
    
    /**
     * Show final error sau khi all retries failed
     */
    private void showFinalError(File file, String errorMsg, int retryCount, ErrorType errorType) {
        mainView.setStatusMessage("L·ªói t·∫£i l√™n: " + file.getName());
        
        String title = "T·∫£i l√™n th·∫•t b·∫°i";
        String message = "T·∫£i l√™n th·∫•t b·∫°i sau " + (retryCount + 1) + " l·∫ßn th·ª≠:\n\n" + errorMsg;
        
        switch (errorType) {
            case CONNECTION:
                message += "\n\nH∆∞·ªõng d·∫´n:\n‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i server\n‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n";
                break;
            case TIMEOUT:
                message += "\n\nH∆∞·ªõng d·∫´n:\n‚Ä¢ Th·ª≠ l·∫°i khi m·∫°ng ·ªïn ƒë·ªãnh h∆°n\n‚Ä¢ Ki·ªÉm tra file c√≥ qu√° l·ªõn kh√¥ng\n‚Ä¢ Li√™n h·ªá IT support";
                break;
            case SERVER_ERROR:
                message += "\n\nH∆∞·ªõng d·∫´n:\n‚Ä¢ Th·ª≠ l·∫°i sau √≠t ph√∫t\n‚Ä¢ Ki·ªÉm tra dung l∆∞·ª£ng server\n‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n";
                break;
            default:
                message += "\n\nH∆∞·ªõng d·∫´n:\n‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n‚Ä¢ Th·ª≠ l·∫°i sau √≠t ph√∫t\n‚Ä¢ Li√™n h·ªá support n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c";
                break;
        }
        
        mainView.showAlert(title, message, IMainView.AlertType.ERROR);
    }
    
    /**
     * Callback interface cho upload results
     */
    public interface UploadResultCallback {
        void onUploadResult(File file, FileItem newFileItem, boolean success, String message);
    }
}