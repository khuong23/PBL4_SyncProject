package com.pbl4.syncproject.client.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

/**
 * Singleton class ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi m·∫°ng duy nh·∫•t trong su·ªët phi√™n l√†m vi·ªác
 * Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t·∫°o k·∫øt n·ªëi m·ªõi cho m·ªói y√™u c·∫ßu
 */
public class ClientConnectionManager {
    private static ClientConnectionManager instance;
    private Socket socket;
    private PrintWriter writer;
    private BufferedReader reader;
    private String serverIP;
    private int serverPort;
    
    // Private constructor ƒë·ªÉ ƒë·∫£m b·∫£o singleton
    private ClientConnectionManager() {}

    /**
     * L·∫•y instance singleton c·ªßa ConnectionManager
     */
    public static synchronized ClientConnectionManager getInstance() {
        if (instance == null) {
            instance = new ClientConnectionManager();
        }
        return instance;
    }

    /**
     * Thi·∫øt l·∫≠p k·∫øt n·ªëi t·ªõi server
     * @param ip ƒë·ªãa ch·ªâ IP c·ªßa server
     * @param port c·ªïng c·ªßa server
     * @throws IOException n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi
     */
    public synchronized void connect(String ip, int port) throws IOException {
        if (socket != null && !socket.isClosed()) {
            // ƒê√£ k·∫øt n·ªëi, c√≥ th·ªÉ ki·ªÉm tra xem c√≥ c·∫ßn ƒë√≥ng k·∫øt n·ªëi c≈© kh√¥ng
            System.out.println("üîÑ K·∫øt n·ªëi hi·ªán t·∫°i v·∫´n ho·∫°t ƒë·ªông: " + serverIP + ":" + serverPort);
            return;
        }
        
        this.serverIP = ip;
        this.serverPort = port;
        socket = new Socket(ip, port);
        writer = new PrintWriter(socket.getOutputStream(), true);
        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        
        System.out.println("‚úÖ K·∫øt n·ªëi li√™n t·ª•c ƒë∆∞·ª£c thi·∫øt l·∫≠p t·ªõi " + ip + ":" + port);
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
     * @return true n·∫øu ƒëang k·∫øt n·ªëi
     */
    public synchronized boolean isConnected() {
        return socket != null && socket.isConnected() && !socket.isClosed();
    }
    
    /**
     * G·ª≠i y√™u c·∫ßu v√† nh·∫≠n ph·∫£n h·ªìi (thread-safe)
     * @param jsonRequest y√™u c·∫ßu JSON
     * @return ph·∫£n h·ªìi t·ª´ server
     * @throws IOException n·∫øu c√≥ l·ªói m·∫°ng
     */
    public synchronized String sendRequestAndGetResponse(String jsonRequest) throws IOException {
        if (!isConnected()) {
            throw new IOException("Kh√¥ng c√≥ k·∫øt n·ªëi t·ªõi server. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        try {
            writer.println(jsonRequest);
            String response = reader.readLine();
            
            if (response == null) {
                throw new IOException("Server ƒë√£ ƒë√≥ng k·∫øt n·ªëi");
            }
            
            return response;
        } catch (IOException e) {
            // Khi c√≥ l·ªói, ƒë√≥ng k·∫øt n·ªëi ƒë·ªÉ bu·ªôc t·∫°o k·∫øt n·ªëi m·ªõi l·∫ßn sau
            close();
            throw e;
        }
    }

    /**
     * L·∫•y th√¥ng tin server hi·ªán t·∫°i
     * @return chu·ªói "IP:Port" ho·∫∑c "Not connected"
     */
    public String getServerInfo() {
        if (isConnected()) {
            return serverIP + ":" + serverPort;
        }
        return "Not connected";
    }

    /**
     * ƒê√≥ng k·∫øt n·ªëi
     */
    public synchronized void close() {
        try {
            if (writer != null) {
                writer.close();
                writer = null;
            }
            if (reader != null) {
                reader.close();
                reader = null;
            }
            if (socket != null) {
                socket.close();
                socket = null;
            }
            System.out.println("üîå K·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.");
        } catch (IOException e) {
            System.err.println("‚ö†Ô∏è L·ªói khi ƒë√≥ng k·∫øt n·ªëi: " + e.getMessage());
        } finally {
            socket = null;
            writer = null;
            reader = null;
        }
    }

    /**
     * Reconnect n·∫øu k·∫øt n·ªëi b·ªã m·∫•t
     * @throws IOException n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i
     */
    public synchronized void reconnect() throws IOException {
        if (serverIP == null || serverPort <= 0) {
            throw new IOException("Kh√¥ng c√≥ th√¥ng tin server ƒë·ªÉ k·∫øt n·ªëi l·∫°i");
        }
        
        close(); // ƒê√≥ng k·∫øt n·ªëi c≈©
        connect(serverIP, serverPort); // T·∫°o k·∫øt n·ªëi m·ªõi
    }
}